#
# DATABRICKS CONFIDENTIAL & PROPRIETARY
# __________________
#
# Copyright 2023-present Databricks, Inc.
# All Rights Reserved.
#
# NOTICE:  All information contained herein is, and remains the property of Databricks, Inc.
# and its suppliers, if any.  The intellectual and technical concepts contained herein are
# proprietary to Databricks, Inc. and its suppliers and may be covered by U.S. and foreign Patents,
# patents in process, and are protected by trade secret and/or copyright law. Dissemination, use,
# or reproduction of this information is strictly forbidden unless prior written permission is
# obtained from Databricks, Inc.
#
# If you view or obtain a copy of this information and believe Databricks, Inc. may not have
# intended it to be made available, please promptly report it to Databricks Legal Department
# @ legal@databricks.com.
#
"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file

DATABRICKS CONFIDENTIAL & PROPRIETARY
__________________

Copyright 2023-present Databricks, Inc.
All Rights Reserved.

NOTICE:  All information contained herein is, and remains the property of Databricks, Inc.
and its suppliers, if any.  The intellectual and technical concepts contained herein are
proprietary to Databricks, Inc. and its suppliers and may be covered by U.S. and foreign Patents,
patents in process, and are protected by trade secret and/or copyright law. Dissemination, use,
or reproduction of this information is strictly forbidden unless prior written permission is
obtained from Databricks, Inc.

If you view or obtain a copy of this information and believe Databricks, Inc. may not have
intended it to be made available, please promptly report it to Databricks Legal Department
@ legal@databricks.com.
"""
import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import sys
import typing

if sys.version_info >= (3, 8):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class RunId(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ID_FIELD_NUMBER: builtins.int
    id: builtins.int
    def __init__(
        self,
        *,
        id: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["id", b"id"]) -> None: ...

global___RunId = RunId

class CommandContext(google.protobuf.message.Message):
    """*
    Message to pass universe com.databricks.backend.common.rpc.CommandContext into runtime
    com.databricks.spark.util.CommandContext via UserContext.extensions.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class TagsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        value: builtins.str
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: builtins.str = ...,
        ) -> None: ...
        def ClearField(
            self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]
        ) -> None: ...

    class ExtraContextEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        value: builtins.str
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: builtins.str = ...,
        ) -> None: ...
        def ClearField(
            self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]
        ) -> None: ...

    ROOTRUNID_FIELD_NUMBER: builtins.int
    CURRENTRUNID_FIELD_NUMBER: builtins.int
    JOBGROUP_FIELD_NUMBER: builtins.int
    TAGS_FIELD_NUMBER: builtins.int
    EXTRACONTEXT_FIELD_NUMBER: builtins.int
    @property
    def rootRunId(self) -> global___RunId: ...
    @property
    def currentRunId(self) -> global___RunId: ...
    jobGroup: builtins.str
    @property
    def tags(self) -> google.protobuf.internal.containers.ScalarMap[builtins.str, builtins.str]: ...
    @property
    def extraContext(
        self,
    ) -> google.protobuf.internal.containers.ScalarMap[builtins.str, builtins.str]: ...
    def __init__(
        self,
        *,
        rootRunId: global___RunId | None = ...,
        currentRunId: global___RunId | None = ...,
        jobGroup: builtins.str | None = ...,
        tags: collections.abc.Mapping[builtins.str, builtins.str] | None = ...,
        extraContext: collections.abc.Mapping[builtins.str, builtins.str] | None = ...,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing_extensions.Literal[
            "_currentRunId",
            b"_currentRunId",
            "_jobGroup",
            b"_jobGroup",
            "_rootRunId",
            b"_rootRunId",
            "currentRunId",
            b"currentRunId",
            "jobGroup",
            b"jobGroup",
            "rootRunId",
            b"rootRunId",
        ],
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "_currentRunId",
            b"_currentRunId",
            "_jobGroup",
            b"_jobGroup",
            "_rootRunId",
            b"_rootRunId",
            "currentRunId",
            b"currentRunId",
            "extraContext",
            b"extraContext",
            "jobGroup",
            b"jobGroup",
            "rootRunId",
            b"rootRunId",
            "tags",
            b"tags",
        ],
    ) -> None: ...
    @typing.overload
    def WhichOneof(
        self, oneof_group: typing_extensions.Literal["_currentRunId", b"_currentRunId"]
    ) -> typing_extensions.Literal["currentRunId"] | None: ...
    @typing.overload
    def WhichOneof(
        self, oneof_group: typing_extensions.Literal["_jobGroup", b"_jobGroup"]
    ) -> typing_extensions.Literal["jobGroup"] | None: ...
    @typing.overload
    def WhichOneof(
        self, oneof_group: typing_extensions.Literal["_rootRunId", b"_rootRunId"]
    ) -> typing_extensions.Literal["rootRunId"] | None: ...

global___CommandContext = CommandContext

class AttributionContext(google.protobuf.message.Message):
    """*
    Message to pass universe com.databricks.logging.AttributionContext into runtime via
    UserContext.extensions.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class TagsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        value: builtins.str
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: builtins.str = ...,
        ) -> None: ...
        def ClearField(
            self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]
        ) -> None: ...

    TAGS_FIELD_NUMBER: builtins.int
    @property
    def tags(self) -> google.protobuf.internal.containers.ScalarMap[builtins.str, builtins.str]: ...
    def __init__(
        self,
        *,
        tags: collections.abc.Mapping[builtins.str, builtins.str] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["tags", b"tags"]) -> None: ...

global___AttributionContext = AttributionContext

class ClientCallContext(google.protobuf.message.Message):
    """Message to pass client-side meta information about a call from the client to the server"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    FILE_NAME_FIELD_NUMBER: builtins.int
    LINE_NO_FIELD_NUMBER: builtins.int
    STATEMENT_FIELD_NUMBER: builtins.int
    file_name: builtins.str
    """Name of the file that triggered the request"""
    line_no: builtins.int
    """Line number that triggered the request"""
    statement: builtins.str
    """(Optional) line of code that triggered the request - language dependent"""
    def __init__(
        self,
        *,
        file_name: builtins.str = ...,
        line_no: builtins.int = ...,
        statement: builtins.str | None = ...,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing_extensions.Literal[
            "_statement", b"_statement", "statement", b"statement"
        ],
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "_statement",
            b"_statement",
            "file_name",
            b"file_name",
            "line_no",
            b"line_no",
            "statement",
            b"statement",
        ],
    ) -> None: ...
    def WhichOneof(
        self, oneof_group: typing_extensions.Literal["_statement", b"_statement"]
    ) -> typing_extensions.Literal["statement"] | None: ...

global___ClientCallContext = ClientCallContext
